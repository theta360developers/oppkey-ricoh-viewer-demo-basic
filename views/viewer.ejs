<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>RICOH360 Viewer Demo</title>
    <link
      rel="stylesheet"
      href="https://unpkg.com/modern-css-reset/dist/reset.min.css"
    />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH"
      crossorigin="anonymous"
    />
    <link rel="shortcut icon" type="image/x-icon" href="/static/favicon.ico" />
  </head>
  <body>
    <div style="padding: 20px">
      <div
        style="
          position: relative;
          width: 100%;
          height: 650px;
          background-color: #2a303c;
        "
      >
        <div id="viewer"></div>
      </div>

      <div
        style="
          display: flex;
          justify-content: space-evenly;
          flex-direction: row;
          flex-wrap: wrap;
        "
      >
        <div>
          <p style="text-align: center">Left Panel Scene</p>
          <ol
            id="leftList"
            style="color: black; height: 250px; overflow-y: scroll"
          ></ol>
        </div>
        <div>
          <p style="text-align: center">Right Panel Scene</p>
          <ol
            id="rightList"
            style="color: black; height: 250px; overflow-y: scroll"
          ></ol>
        </div>
      </div>
    </div>
    <script src="https://r360pf-prod-static.s3.us-west-2.amazonaws.com/viewer/v0.14.0/ricoh360-viewer.js"></script>

    <script>
      const fetchContent = async () => {
        // fetch content from /content endpoint and store data in const data
        const res = await fetch("/content", {
          method: "GET",
          headers: {
            "Content-Type": "application/x-www-form-urlencoded",
          },
        });
        const data = await res.json();
        const initialContentId = data[0]["content_id"];
        // populate buttons on left pane list
        const leftList = document.getElementById("leftList");
        for (let i = 0; i < data.length; i++) {
          if (data[i].status === "uploaded") {
            // console.log(data[i]);
            const listItem = document.createElement("li");
            listItem.innerHTML = `<div class="p-1">
              <img style="cursor: pointer;" src="${
                data[i].thumbnail_url
              }" onclick="viewer.switchScene({ contentId: '${
              data[i].content_id
            }'},${0})">
              <button type="button" class = "btn btn-primary mt-1" onclick="viewer.switchScene({ contentId: '${
                data[i].content_id
              }',transform:'enhancement'},${0})">
                Enhance
              </button>
              <button type="button" class = "btn btn-primary mt-1" onclick="viewer.switchScene({ contentId: '${
                data[i].content_id
              }',transform:'b_person'},${0})">
                Blur People
              </button>
              <button type="button" class = "btn btn-primary mt-1" onclick="viewer.switchScene({ contentId: '${
                data[i].content_id
              }',transform:'p_cubic'},${0})">
                Cubic View
              </button>
            </div>`;
            leftList.append(listItem);
          }
        }

        // populate buttons on right pane list
        const rightList = document.getElementById("rightList");
        for (let i = 0; i < data.length; i++) {
          if (data[i].status === "uploaded") {
            // console.log(data[i]);
            const listItem = document.createElement("li");
            listItem.innerHTML = `<div class="p-1">
              <img style="cursor: pointer;" src="${
                data[i].thumbnail_url
              }" onclick="viewer.switchScene({ contentId: '${
              data[i].content_id
            }'},${1})">
              <button type="button" class = "btn btn-primary mt-1" onclick="viewer.switchScene({ contentId: '${
                data[i].content_id
              }',transform:'enhancement'},${1})">
                Enhance
              </button>
              <button type="button" class = "btn btn-primary mt-1" onclick="viewer.switchScene({ contentId: '${
                data[i].content_id
              }',transform:'b_person'},${1})">
                Blur People
              </button>
              <button type="button" class = "btn btn-primary mt-1" onclick="viewer.switchScene({ contentId: '${
                data[i].content_id
              }',transform:'p_cubic'},${1})">
                Cubic View
              </button>
            </div>`;
            rightList.append(listItem);
          }
        }
        startViewer(initialContentId);
      };

      // fetch token callback function to pass into viewer
      const fetchToken = async () => {
        const res = await fetch("/token", {
          method: "GET",
          headers: {
            "Content-Type": "application/x-www-form-urlencoded",
          },
        });
        const data = await res.text();
        return data;
      };

      // define ui buttons to pass into viewer
      const ui = {
        cropping: {
          horizontalMargin: 15,
          verticalMargin: 75,
        },
        toolbar: {
          isHidden: false,
          cancelButton: {
            label: "Cancel",
          },
          checkButton: {
            label: "Done",
          },
          autoRotateButton: {
            isHidden: false,
            label: "Auto Rotate",
          },
          croppingButton: {
            isHidden: false,
            enterLabel: "Enter Cropping",
            exitLabel: "Exit Cropping",
          },
          annotationButton: {
            isHidden: false,
            enterLabel: "Use keyboard to annotate",
            exitLabel: "Exit keyboard annotation",
          },
          drawingButton: {
            isHidden: false,
            enterLabel: "Enter Drawing",
            exitLabel: "Exit Drawing",
          },
          fullScreenButton: {
            isHidden: false,
            enterLabel: "Enter Full Screen",
            exitLabel: "Exit Full Screen",
          },
          homePositionButton: {
            isHidden: false,
            label: "Home Position",
          },
          zoomControlButtons: {
            isHidden: false,
            zoomInLabel: "Zoom In",
            zoomOutLabel: "Zoom Out",
          },
        },
        tooltip: {
          isHidden: false,
        },
        verticalPanel: {
          isHidden: false,
          topMargin: 25,
        },
      };

      // on crop function, crops and downloads image selection
      const onCropped = async (url) => {
        const image = await fetch(url);
        const imageBlob = await image.blob();
        const imageURL = URL.createObjectURL(imageBlob);
        const downloadLink = document.createElement("a");
        downloadLink.href = imageURL;
        downloadLink.download = "cropped_image.jpeg";
        document.body.appendChild(downloadLink);
        downloadLink.click();
        document.body.removeChild(downloadLink);
      };

      // create new viewer with UI, fetchtoken callback function and onCrop callback function
      const viewer = new RICOH360Viewer({
        divId: "viewer",
        onFetchToken: fetchToken,
        isCubemapEnabled: true,
        ui,
        onSelected: (index) => {
          console.log(index);
        },
        onCropped: onCropped,
      });

      // call fetch content function to fetch content ids and populate buttons
      // and start the viewer
      fetchContent();

      // start viewer
      // function receives the initial contentId from fetchContent
      // and grabs the data from the RICOH360 platform server with
      // the `fetch("/content",...` endpoint
      // the code for that endpoint is in ./index.js and uses
      // a different token to get the content from the RICOH server
      const startViewer = (initialContentId) => {
        console.log("the initial content id is " + initialContentId);
        viewer.start({
          contentId: initialContentId,
          transform: "enhancement",
        });
      };
    </script>
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
      crossorigin="anonymous"
    ></script>
    <script
      src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"
      integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r"
      crossorigin="anonymous"
    ></script>
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.min.js"
      integrity="sha384-0pUGZvbkm6XF6gxjEnlmuGrJXVbNuzT9qBBavbLwCsOGabYfZo0T0to5eqruptLy"
      crossorigin="anonymous"
    ></script>
  </body>
</html>
